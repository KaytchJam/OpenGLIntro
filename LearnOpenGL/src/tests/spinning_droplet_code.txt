#include <iostream>

#include <glad/glad.h>
#include <GLFW/glfw3.h>

// IMAGE / TEXTURE FUNCTIONALITY
#include "vendor/stb_image/stb_image.h"

// My additions
#include "Shader.h"
#include "ErrorHandler.h"

// C/C++ Standard Library
#include <string>
#include <math.h>
#include <time.h>
#include <cmath>

// GLM MATRIX MATH
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

int TARGET_FPS = 30;


// basic vector struct for storing x, y, and z values
struct basicVector3 { float x, y, z; };
struct basicVector2 { float x, y; };

// just to make doing these exercises easier, returning a struct of all our object ids from each exercise
struct objectIds { unsigned int vao1, vao2, vbo1, vbo2, ebo; };
struct extendedObjectIds { unsigned int vao1, vao2, vbo1, vbo2, ebo1, ebo2, txt1, txt2; };
struct shaderIds { unsigned int program1, program2, program3; };

basicVector2 addVector(basicVector2 v1, basicVector2 v2) { return { v1.x + v2.x, v1.y + v2.y }; }
basicVector2 scalarVector(float scalar, basicVector2 v1) { return { scalar * v1.x, scalar * v1.y }; }

// General Shape Draws
extendedObjectIds drawDroplet(std::string img_path);

void allErrorsFound() 
{
	GLenum current_error = glGetError();
	while (current_error)
	{
		std::cout << "Error (" << current_error << ") found." << std::endl;
		current_error = glGetError();
	}
}


void errorCheck(int success, unsigned int shader_obj, char* infoLog) 
{
	if (!success)
	{
		glGetShaderInfoLog(shader_obj, 512, NULL, infoLog);
		std::cout << "ERROR::SHADER::VERTEX::COMPILATION_FAILED\n" << infoLog << std::endl;
	}
}

void processInput(GLFWwindow* window) 
{
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
	{
		glfwSetWindowShouldClose(window, true);
		std::cout << "Window was closed using escape key" << std::endl;
	}
}

void framebuffer_size_callback(GLFWwindow *window, int width, int height)
{
	glViewport(0, 0, width, height);
}

void printMat4(glm::mat4& myMat) 
{
	std::printf("%f %f %f %f\n%f %f %f %f\n%f %f %f %f\n%f %f %f %f\n",
		myMat[0].x, myMat[1].x, myMat[2].x, myMat[3].x,
		myMat[0].y, myMat[1].y, myMat[2].y, myMat[3].y,
		myMat[0].z, myMat[1].z, myMat[2].z, myMat[3].z,
		myMat[0].w, myMat[1].w, myMat[2].w, myMat[3].w);
	std::cout << std::endl;
}

int main()
{

	glfwInit(); // initialize glfw

	// setting window options
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

	const int PROJECT_LENGTH = 1280;
	const int PROJECT_HEIGHT = 720;

	// create window object
	GLFWwindow* window = glfwCreateWindow(PROJECT_LENGTH, PROJECT_HEIGHT, "LearnOpenGL", NULL, NULL);

	// check for proper window creation
	if (window == NULL)
	{
		std::cout << "Window creation failed." << std::endl;
		glfwTerminate();
		return -1;
	}
	glfwMakeContextCurrent(window);

	// check for proper GLAD initialization
	if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
	{
		std::cout << "Failed to initialize GLAD" << std::endl;
		return -1;
	}

	glViewport(0, 0, PROJECT_LENGTH, PROJECT_HEIGHT); // indicate rendering window size
	glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

	//std::string shaderPath("resources/shaders/");
	Shader myShader("resources/shaders/vertex/TexTransform.shader", "resources/shaders/fragment/TexPixelation.shader");
	const float RGB_CEIL = 255;

	// enable scanline effect
	myShader.useShader();
	myShader.setUniform1b("scanlines", true);

	std::string path_header = "resources/textures/";
	//extendedObjectIds ids = bouncingLogo(path_header + "dvd_video.png");
	extendedObjectIds ids = drawDroplet(path_header + "water_droplet.png");
	std::cout << "Buffer stuff dealt with" << std::endl;

	//glPolygonMode(GL_FRONT_AND_BACK, GL_LINE); // enable wireframe mode
	//glEnable(GL_CULL_FACE); 
	//glCullFace(GL_BACK);
	//glFrontFace(GL_CCW);
	
	// the above settings are associated with our currently bound vertex buffer object
	std::cout << "about to enter the rendering loop" << std::endl;

	//glm::mat4 model = glm::rotate(glm::mat4(1.0f), glm::radians(-55.0f), glm::vec3(1.0f, 0.0f, 0.0f));
	//glm::mat4 view = glm::translate(glm::mat4(1.0f), glm::vec3(0.0f, 0.0f, -1.0f));
	//glm::mat4 projection = glm::perspective(glm::radians(45.0f), (float)PROJECT_LENGTH / PROJECT_HEIGHT, 0.1f, 100.0f);
	//glm::mat4 orpheus = glm::ortho(0.0f,(float) PROJECT_LENGTH, (float) PROJECT_HEIGHT, 100.0f);
	//printMat4(orpheus);

	// the render loop
	glm::mat4 trans = glm::mat4(1.0f);
	float xOffset = 0.005f;
	double lastTime = glfwGetTime();
	while (!glfwWindowShouldClose(window)) // checks if the window has been 'told' to close
	{
		processInput(window); // handle user input

		while (glfwGetTime() < lastTime + 1.0/TARGET_FPS) {

			// RENDER COMMANDS ...
			glClearColor(0x2E / RGB_CEIL, 0xCC / RGB_CEIL, 0xFF / RGB_CEIL, 1.0f);
			glClear(GL_COLOR_BUFFER_BIT);

			myShader.useShader();
			trans = glm::rotate(trans, (float)glm::radians(0.1f), glm::vec3(0.0f, 1.0f, 0.0f)); // rotate on z axis
			//glm::mat4 moved = glm::translate(trans, glm::vec3(cos(glfwGetTime() / 100) / 3, sin(glfwGetTime() / 100) / 3, 0.0f));
			myShader.setUniformMatrix4fv("transform", 1, trans);

			glBindTexture(GL_TEXTURE_2D, ids.txt1);
			glBindVertexArray(ids.vao1); 
			glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

			glfwSwapBuffers(window);
			glfwPollEvents(); // checks if an event has been triggered (i.e. keyboard input)
			allErrorsFound(); // errors found during each iteration
		}
		lastTime += 1.0 / TARGET_FPS;
	}

	// deleting to avoid memory leaks
	glDeleteVertexArrays(2, &ids.vao1);
	glDeleteBuffers(4, &ids.vbo1);
	glDeleteTextures(2, &ids.txt1);


	glfwTerminate(); // clean all of glfw's allocated resources
	return 0;
}

extendedObjectIds drawDroplet(std::string img_path) {
	float vertices[] = {
		-0.25f, -0.50f, 0.0f, // positions 1
		0.0f, 0.0f, // texture coords 1

		0.25f, -0.50f, 0.0f, // positions 2
		1.0f, 0.0f, // texture coords 2

		0.25f, 0.50f, 0.0f, // positions 3
		1.0f, 1.0f, // texture coords 3

		-0.25f, 0.50f, 0.0f, // positions 4
		0.0f, 1.0f, // texture coords 4
	};

	unsigned int indices[] = { 0, 1, 2, 2, 3, 0 };

	unsigned int VAO, VBO, EBO;

	// Gen Vertex Array
	GLCall(glGenVertexArrays(1, &VAO));
	glBindVertexArray(VAO);

	// Buffers in use
	GLCall(glGenBuffers(1, &VBO));
	GLCall(glGenBuffers(1, &EBO));

	// Vertex Data
	GLCall(glBindBuffer(GL_ARRAY_BUFFER, VBO));
	GLCall(glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW));
	GLCall(glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(float) * 5, NULL));
	GLCall(glEnableVertexAttribArray(0));

	// Element Buffer Data
	GLCall(glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO));
	GLCall(glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW));

	// Texture coord data
	GLCall(glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, sizeof(float) * 5, (void*)(3 * sizeof(float))));
	GLCall(glEnableVertexAttribArray(1));

	unsigned int texture1;
	GLCall(glGenTextures(1, &texture1));
	GLCall(glBindTexture(GL_TEXTURE_2D, texture1));

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

	//std::cout << "IMAGE LOADING" << std::endl;
	stbi_set_flip_vertically_on_load(true);
	int width, height, nr_channels;
	unsigned char* img_data = stbi_load(img_path.c_str(), &width, &height, &nr_channels, 0);
	if (img_data) {
		std::printf("number of channels: %d\n", nr_channels);
		glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, img_data);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else {
		std::cout << "Failed to load texture" << std::endl;
	}
	//std::cout << "FREEING IMAGE" << std::endl;
	stbi_image_free(img_data);

	glBindVertexArray(0);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
	glBindBuffer(GL_ARRAY_BUFFER, 0);

	// allows for use of alpha channel / transparency
	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

	std::cout << "leaving water droplet" << std::endl;
	return { VAO, 0, VBO, 0, EBO, 0, texture1, 0 };
}